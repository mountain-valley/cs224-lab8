irmovq $1, %rbx 
subq %rbx, %rax   # decrease %rax by 2
rrmovq %rax, %rcx  # set counter

irmovq $0, %r10      # Constant 0
irmovq $1,%r9        # Constant 1
irmovq $8, %r8
irmovq data, %rsi  # store the address of data in %rsi
irmovq data, %rdi
irmovq bool, %rbp

rmmovq %r9, (%rbp)  # set bool to TRUE

main:
    jmp while
    
# swaps A[i] and A[i+1]
swap: 
    # switch the values in memory
    mrmovq (%rdi), %r11   
    mrmovq 8(%rdi), %r12
    rmmovq %r12, (%rdi)
    rmmovq %r11, 8(%rdi)
    rmmovq %r9, (%rbp)  # set bool to TRUE
    jmp decrement

loop:  
    # get A[i] and store in %r11
    mrmovq (%rdi), %r11
    # get A[i+1] and store in %r12
    mrmovq 8(%rdi), %r12
    
    # A[i] - A[i+1], which will be negative if A[i+1] is greater
    subq %r12, %r11  #%r11 - %r12
    jg swap  #if A[i] > A[i+1}, then swap
    
# decrement counter and go to next iteration of loop    
decrement:   
    # increase pointer to next location
    addq %r8, %rdi
    subq %r9, %rcx      # count--.  Set CC
    jne    loop          # Stop when 0

while:  
    # check if bool is TRUE
    mrmovq (%rbp), %rbx  # get value of bool
    subq %r10, %rbx
    
    # set bool to FALSE
    rmmovq %r10, (%rbp)
    
    # reset pointer to beginning of array
    irmovq data, %rdi
    # reset counter
    rrmovq %rax, %rcx
    # jump to loop if bool was not equal to 0 (before the last line of code)
    jne loop

checker:   
    mrmovq (%rdi),%rdx   # Get *start
    addq %r8,%rdi        # start++
    subq %r9,%rax        # count--.  Set CC
test:   jne    checker 

mrmovq (%rdi),%rdx   # Get *start
